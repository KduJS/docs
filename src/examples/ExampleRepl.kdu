<script setup lang="ts">
import { Repl, ReplStore } from '@kdujs/repl'
import '@kdujs/repl/style.css'
import { data } from './examples.data'
import { inject, watchEffect, version, Ref } from 'kdu'
import { resolveSFCExample, resolveNoBuildExample, onHashChange } from './utils'

const store = new ReplStore({
  defaultKduRuntimeURL: `https://unpkg.com/kdu@${version}/dist/kdu.esm-browser.js`
})

const preferComposition = inject('prefer-composition') as Ref<boolean>
const preferSFC = inject('prefer-sfc') as Ref<boolean>

watchEffect(updateExample)
onHashChange(updateExample)

/**
 * We perform some runtime logic to transform source files into different
 * API / format combinations:
 * - Options vs. Composition
 * - plain HTML vs. SFCs
 */
function updateExample() {
  let hash = location.hash.slice(1)
  if (!data.hasOwnProperty(hash)) {
    hash = 'hello-world'
    location.hash = `#${hash}`
  }
  store.setFiles(
    preferSFC.value
      ? resolveSFCExample(data[hash], preferComposition.value)
      : resolveNoBuildExample(data[hash], preferComposition.value),
    preferSFC.value ? 'App.kdu' : 'index.html'
  )
}
</script>

<template>
  <Repl
    :store="store"
    :showImportMap="!preferSFC"
    :showCompileOutput="false"
    :clearConsole="false"
  />
</template>

<style scoped>
.kdu-repl {
  max-width: 1105px;
  border-right: 1px solid var(--kt-c-divider-light);
  height: calc(100vh - var(--kt-nav-height) - var(--kt-banner-height, 0px));
}

@media (max-width: 960px) {
  .kdu-repl {
    border: none;
    height: calc(
      100vh - var(--kt-nav-height) - var(--kt-banner-height, 0px) - 48px
    );
  }
}
</style>
